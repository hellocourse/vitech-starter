// mock/test.ts
import path from "node:path";
import fs from "node:fs";
var __injected_dirname__ = "D:\\BaiduNetdiskDownload\\00_front_end\\pk-front-vue3-feature\\pk-front-vue3\\mock";
var test_default = [
  {
    url: "/api/get",
    method: "get",
    response: () => {
      console.log("GET \u8BF7\u6C42\u88AB\u8C03\u7528");
      return {
        code: 0,
        data: {
          name: "vben",
          age: 25
        }
      };
    }
  },
  {
    url: "/api/post",
    method: "post",
    timeout: 1e3,
    response: ({ body }) => {
      console.log("POST \u8BF7\u6C42\u88AB\u8C03\u7528");
      console.log("\u8BF7\u6C42\u6570\u636E:", body);
      return {
        code: 0,
        data: {
          message: "\u8FD9\u662F POST \u8BF7\u6C42\u7684\u54CD\u5E94",
          receivedData: body,
          serverTime: (/* @__PURE__ */ new Date()).toISOString()
        }
      };
    }
  },
  {
    url: "/api/text",
    method: "get",
    rawResponse: async (_req, res) => {
      try {
        const imagePath = path.resolve(__injected_dirname__, "./demo.png");
        console.log("\u5C1D\u8BD5\u8BFB\u53D6\u56FE\u7247:", imagePath);
        const data = await fs.promises.readFile(imagePath);
        res.setHeader("Content-Type", "image/png");
        res.statusCode = 200;
        res.end(data);
      } catch (err) {
        console.error("\u8BFB\u53D6\u56FE\u7247\u5931\u8D25:", err);
        res.statusCode = 500;
        res.setHeader("Content-Type", "text/plain");
        res.end("Error: Unable to read image file. " + err.message);
      }
    }
  }
];
export {
  test_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay90ZXN0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkQ6XFxcXEJhaWR1TmV0ZGlza0Rvd25sb2FkXFxcXDAwX2Zyb250X2VuZFxcXFxway1mcm9udC12dWUzLWZlYXR1cmVcXFxccGstZnJvbnQtdnVlM1xcXFxtb2NrXFxcXHRlc3QudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRDpcXFxcQmFpZHVOZXRkaXNrRG93bmxvYWRcXFxcMDBfZnJvbnRfZW5kXFxcXHBrLWZyb250LXZ1ZTMtZmVhdHVyZVxcXFxway1mcm9udC12dWUzXFxcXG1vY2tcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0Q6L0JhaWR1TmV0ZGlza0Rvd25sb2FkLzAwX2Zyb250X2VuZC9way1mcm9udC12dWUzLWZlYXR1cmUvcGstZnJvbnQtdnVlMy9tb2NrL3Rlc3QudHNcIjsvLyB0ZXN0LnRzXG5cbmltcG9ydCB0eXBlIHsgTW9ja01ldGhvZCB9IGZyb20gJ3ZpdGUtcGx1Z2luLW1vY2snXG5pbXBvcnQgcGF0aCBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgZnMgZnJvbSAnbm9kZTpmcydcbmV4cG9ydCBkZWZhdWx0IFtcbiAge1xuICAgIHVybDogJy9hcGkvZ2V0JyxcbiAgICBtZXRob2Q6ICdnZXQnLFxuICAgIHJlc3BvbnNlOiAoKSA9PiB7XG4gICAgICAgIC8vIFx1NTcyOFx1N0VDOFx1N0FFRlx1NjYzRVx1NzkzQVxuICAgICAgY29uc29sZS5sb2coJ0dFVCBcdThCRjdcdTZDNDJcdTg4QUJcdThDMDNcdTc1MjgnKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG5hbWU6ICd2YmVuJyxcbiAgICAgICAgICBhZ2U6IDI1XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICB1cmw6ICcvYXBpL3Bvc3QnLFxuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIHRpbWVvdXQ6IDEwMDAsXG4gICAgcmVzcG9uc2U6ICh7IGJvZHkgfSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1BPU1QgXHU4QkY3XHU2QzQyXHU4OEFCXHU4QzAzXHU3NTI4JylcbiAgICAgIGNvbnNvbGUubG9nKCdcdThCRjdcdTZDNDJcdTY1NzBcdTYzNkU6JywgYm9keSlcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvZGU6IDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBtZXNzYWdlOiAnXHU4RkQ5XHU2NjJGIFBPU1QgXHU4QkY3XHU2QzQyXHU3Njg0XHU1NENEXHU1RTk0JyxcbiAgICAgICAgICByZWNlaXZlZERhdGE6IGJvZHksXG4gICAgICAgICAgc2VydmVyVGltZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICB1cmw6ICcvYXBpL3RleHQnLFxuICAgIG1ldGhvZDogJ2dldCcsXG4gICAgcmF3UmVzcG9uc2U6IGFzeW5jIChfcmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbWFnZVBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi9kZW1vLnBuZycpXG4gICAgICAgIGNvbnNvbGUubG9nKCdcdTVDMURcdThCRDVcdThCRkJcdTUzRDZcdTU2RkVcdTcyNDc6JywgaW1hZ2VQYXRoKVxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUoaW1hZ2VQYXRoKVxuICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnaW1hZ2UvcG5nJylcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSAyMDBcbiAgICAgICAgcmVzLmVuZChkYXRhKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OEJGQlx1NTNENlx1NTZGRVx1NzI0N1x1NTkzMVx1OEQyNTonLCBlcnIpXG4gICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNTAwXG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluJylcbiAgICAgICAgcmVzLmVuZCgnRXJyb3I6IFVuYWJsZSB0byByZWFkIGltYWdlIGZpbGUuICcgKyBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbl0gYXMgTW9ja01ldGhvZFtdXG5cblxuXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBR0EsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sUUFBUTtBQUo2RyxJQUFNLHVCQUF1QjtBQUt6SixJQUFPLGVBQVE7QUFBQSxFQUNiO0FBQUEsSUFDRSxLQUFLO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUixVQUFVLE1BQU07QUFFZCxjQUFRLElBQUksb0NBQVc7QUFDdkIsYUFBTztBQUFBLFFBQ0wsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sS0FBSztBQUFBLFFBQ1A7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsSUFDRSxLQUFLO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUixTQUFTO0FBQUEsSUFDVCxVQUFVLENBQUMsRUFBRSxLQUFLLE1BQU07QUFDdEIsY0FBUSxJQUFJLHFDQUFZO0FBQ3hCLGNBQVEsSUFBSSw2QkFBUyxJQUFJO0FBQ3pCLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNKLFNBQVM7QUFBQSxVQUNULGNBQWM7QUFBQSxVQUNkLGFBQVksb0JBQUksS0FBSyxHQUFFLFlBQVk7QUFBQSxRQUNyQztBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBQ0E7QUFBQSxJQUNFLEtBQUs7QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLGFBQWEsT0FBTyxNQUFXLFFBQWE7QUFDMUMsVUFBSTtBQUNGLGNBQU0sWUFBWSxLQUFLLFFBQVEsc0JBQVcsWUFBWTtBQUN0RCxnQkFBUSxJQUFJLHlDQUFXLFNBQVM7QUFDaEMsY0FBTSxPQUFPLE1BQU0sR0FBRyxTQUFTLFNBQVMsU0FBUztBQUNqRCxZQUFJLFVBQVUsZ0JBQWdCLFdBQVc7QUFDekMsWUFBSSxhQUFhO0FBQ2pCLFlBQUksSUFBSSxJQUFJO0FBQUEsTUFDZCxTQUFTLEtBQUs7QUFDWixnQkFBUSxNQUFNLHlDQUFXLEdBQUc7QUFDNUIsWUFBSSxhQUFhO0FBQ2pCLFlBQUksVUFBVSxnQkFBZ0IsWUFBWTtBQUMxQyxZQUFJLElBQUksdUNBQXVDLElBQUksT0FBTztBQUFBLE1BQzVEO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
